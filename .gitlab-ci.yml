# Jobs are used to create builds, which are then picked up by Runners and
# executed within the environment of the Runner. What is important, is that
# each job is run independently from each other.
image: registry.gitlab.nbs.sk/ofi/docker-images/python3-oracle:py3.8.9-oracle21.1.-trusted-certs

# Define ALL stages that will be executed during GitLab CI
#
# First all jobs of install stage are executed in parallel.
# If all jobs of install succeed, the security jobs are executed in parallel.
# If all jobs of security succeed, the test jobs are executed in parallel.
# If all jobs of test succeed, the standards jobs are executed in parallel.
# If all jobs of standards succeed, the release jobs are executed in parallel but only for TAGS.
# If all jobs of release succeed, the commit is marked as success, release will publish the library to PyPI.
# If any of the previous jobs fails, the commit is marked as failed and no jobs of further stage are executed.
stages:
  - install
  - security
  - test
  - standards
  - release

variables:
  GIT_SSL_NO_VERIFY: 'true'
  # NBS Proxy variables
  http_proxy: 'http://proxy.nbs.sk:3128'
  https_proxy: 'http://proxy.nbs.sk:3128'
  no_proxy: 'localhost,127.0.0.1,.nbs.sk'
  HTTP_PROXY: 'http://proxy.nbs.sk:3128'
  HTTPS_PROXY: 'http://proxy.nbs.sk:3128'
  NO_PROXY: 'localhost,127.0.0.1,.nbs.sk'
  ## helper variables to enable verbose output for debugging purposes
  # GIT_CURL_VERBOSE: "1"
  # GIT_DEBUG_LOOKUP: "1"
  # GIT_TRANSLOOP_DEBUG: "1"
  # GIT_TRANSPORT_HELPER_DEBUG: "1"

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

#
# Install stage
#
Package_installation:3.8:
  stage: install
  before_script:
    - python --version
  script:
    - python setup.py install
  when: on_success

#
# Quality standards stage
#
PEP8_code_standards:
  stage: standards
  before_script:
    - pip install flake8 --quiet
  script:
    - flake8 setup.py postal_codes_tools
  when: on_success

Code_Complexity:
  stage: standards
  before_script:
    - pip install radon --quiet
  script:
    - echo "---------> Compute Maintainability Index"
    - radon mi postal_codes_tools -i tests
    - echo "---------> Compute Cyclomatic Complexity"
    - radon cc postal_codes_tools -a -i tests
  when: on_success

Black_formatting:
  stage: standards
  before_script:
    - pip install black --quiet
  script:
    - black --target-version py38 --line-length 120 --diff --check .
  when: on_success
#
# Test stage
#
Python:3.9_test_code:
  stage: test
  image: registry.gitlab.nbs.sk/ofi/docker-images/python3-oracle:py3.9.4-oracle21.1
  before_script:
    - python --version
    - pip install pytest --quiet
  script:
    - pytest postal_codes_tools
  when: on_success

Python:3.8_test_code:
  stage: test
  before_script:
    - python --version
    - pip install pytest pytest-cov --quiet
  script:
    - pytest --cov postal_codes_tools
    - coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml
  when: on_success

Python:3.6_test_code:
  stage: test
  image: registry.gitlab.nbs.sk/ofi/docker-images/python3-oracle:py3.6.13-oracle21.1
  before_script:
    - python --version
    - pip install pytest --quiet
  script:
    - pytest postal_codes_tools
  when: on_success

#
# Security stage
#
dlint_sast:
  stage: security
  before_script:
    - pip install dlint --quiet
  script:
    - flake8 --select=DUO setup.py postal_codes_tools
  when: on_success

# Bandit_code_analysis:
#   stage: security
#   before_script:
#    - echo "---------> Install Bandit"
#    - pip install bandit --quiet
#   script:
#    - echo "---------> Run Security Static Code Analysis"
#    - bandit -r postal_codes_tools -x postal_codes_tools/tests
#   when: on_success

sast:
  stage: security
  variables:
    SAST_EXCLUDED_ANALYZERS: brakeman, flawfinder, gosec, kubesec, nodejs-scan, phpcs-security-audit,
      pmd-apex, security-code-scan, semgrep, sobelow, spotbugs
    SAST_BANDIT_EXCLUDED_PATHS: "*/tests/*"
  tags:
    - openshift

#dependency_scanning:
#  stage: security
#  before_script:
#    - "git config --global http.proxy http://proxy.nbs.sk:3128"
#    - "git config --global remote.gitlab.nbs.sk.proxy ''"
#  tags:
#    - openshift

secret_detection:
  stage: security
  tags:
    - openshift

# license_scanning:
#   stage: security
#   tags:
#     - openshift


#
# Release stage
#
ReleasePackage:
  stage: release
  before_script:
    - pip install twine
  script:
    - python setup.py sdist bdist_wheel
    - echo "---------> Upload to GitLab PyPI"
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=package-bot python -m twine upload
      --repository-url https://gitlab.nbs.sk/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
      dist/* --cert /usr/share/ca-certificates/nbs.crt
  when: on_success
  only:
    - tags
